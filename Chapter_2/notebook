#笔记
# 隐式评价和基于物品的协同过滤
#显式评价（赞一下，踩一脚，五星好评等等）
#隐式评价（比如：在淘宝上买了 MP3 ，我们可以认为  他喜欢这个商品）

内容：
 1：显式评价
 2：隐式评价
 3：哪种评价方式更加准确
 4：基于用户的协同过滤 和 基于产品的协同过滤
 5：修正后的余弦相似度
 6：Slope One  的 python 实现
 7：MovieLens 的数据

 #用户不会像裁判一样适合的打分，用户的规则，可能是极好或者极坏，所以上一章讲的方法 时常不可用


 所谓的隐式评价：就是我们不让用户明确的给出对物品的评价，而是通过观察他们的行为来获得偏好信息；
        应用：1：浏览了还浏览了，
              2：用户的实际购买记录：1：买过这个商品的人  还买过 2： 浏览过这个商品的还浏览过
                根据这些信息，进行推荐


  显式评价的问题：
        1：人们很懒，不愿意评价物品
        2：人们会撒谎，或者存在偏见
        3：人们不会更新他的评论

  推荐什么好：
    有可能是帮别人买的东西；
    或者和别人共用一个账号；


  基于用户的推荐：
      弊端：1）随着用户数量的增加，其计算量也会增加。这种算法 在只有几千个用户的时候，可以工作的很好，但是到达一百万就有很大瓶颈了
      2）稀疏性  物品的数量要远远多于用户的数量   所以用户只是 对一小部分的商品进行评价，这就造成了 数据的稀疏性

 基于商品的推荐：
       假设，我们有一种算法可以计算出两个商品的相似度； A与B 有很高的相似度，如果用户给A评分很高 ， 那么我们有理由把B也推荐给用户

 两种方式的区别；
    基于用户的方式：寻找相似用户，把相似用户评价过的也推荐给用户
    基于物品的方式：寻找相似物品，再结合用户的评价 来推荐

    基于用户的协同过滤，又称为内存协同过滤，因为 我们需要把所有的评价数据 都要保存在内存中来进行推荐

    基于商品的协同过滤：又称基于模型的协同过滤，我们不需要保存所有的数据，而是通过构建一个物品相似度模型  来进行推荐

      修正的余弦相似度：
            s(i,j)= ∑（R ui- mean（u））*（R uj- mean（u））/（(根号下（Rui-mean（u）**2）)*(根号下（Ruj-mean（u）**2）)）
            Rui- mean（u）用户u减去用户u 对所有物品的评价均值




